{"version":3,"sources":["Timetable.js","App.js","index.js","registerServiceWorker.js"],"names":["DAYS","Item","_ref","item","alterations","length","forEach","alteration","i","push","react_default","a","createElement","key","date","style","color","message","description","room","location","dayRows","day","dayName","isNaN","items","dayNameCell","rowSpan","map","startTime","endTime","Timetable_Item","dayRow","Timetable","_ref2","timetable","className","cellSpacing","cellPadding","url","URL","window","href","console","log","DEBUG","searchParams","get","localDataSource","GitInfo","gitInfo","Fragment","hash","App","localDataSourceName","this","getLocalDataSourceURL","getDataSourceURL","axios","Date","getTime","response","setState","data","name","vendor","src_Timetable","error","errorInfo","statusCode","options","uri","JSON","stringify","String","_this","reduce","result","timetables","_ref3","renderError","renderTimetable","renderTimetables","App_GitInfo","app","renderApp","state","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","addEventListener","swUrl","concat","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch"],"mappings":"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","file":"static/js/main.72e18e49.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DAYS = [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"];\r\n\r\nconst Item = ({ item }) => {\r\n  const alterations = [];\r\n  if (item.alterations && item.alterations.length > 0) {\r\n    item.alterations.forEach((alteration, i) => {\r\n      alterations.push(<br key={\"br\" + i} />);\r\n      const date = alteration.date || \"No date\";\r\n      alterations.push(<span key={\"alteration-\" + i} style={{ color: \"red\" }}>{date + \", \" + alteration.message}</span>);\r\n    });\r\n  }\r\n  return (\r\n    <div >\r\n      <div>{item.description}</div>\r\n      <div>{item.room}{item.location}</div>\r\n      <div>{alterations}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction dayRow(i, dayNameCell, item) {\r\n  return (\r\n    <tr key={i}>\r\n      {dayNameCell(i)}\r\n      <td>{item.startTime}</td>\r\n      <td>{item.endTime}</td>\r\n      <td><Item item={item} key={i} /></td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nfunction dayRows(day) {\r\n  const dayName = isNaN(day.day) ? day.day : DAYS[day.day];\r\n  const item0 = day.items[0];\r\n  if (!item0) {\r\n    return null;\r\n  }\r\n  const dayNameCell = (i) => (i === 0) ? <td rowSpan={day.items.length}>{dayName}</td> : null;\r\n  return day.items.map((item, i) => dayRow(i, dayNameCell, item));\r\n}\r\n\r\nconst Timetable = ({ timetable }) => (\r\n  <table className=\"tableTimetable\" cellSpacing={0} cellPadding={0}>\r\n    <tbody>\r\n      {timetable.map(dayRows)}\r\n    </tbody>\r\n  </table>\r\n);\r\n\r\nexport default Timetable;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./App.css\";\r\nimport Timetable from \"./Timetable\";\r\nimport gitInfo from \"./static/gitInfo.json\";\r\n\r\nconst url = new URL(window.location.href);\r\nconsole.log(\"Use DEBUG query parameter to use local data (not live data).\");\r\nconst DEBUG = url.searchParams.get(\"DEBUG\") !== \"false\";\r\nconst localDataSource = url.searchParams.get(\"localDataSource\");\r\n\r\n\r\nconst GitInfo = ({ gitInfo }) => (\r\n  <React.Fragment>\r\n    <h2>Version Info</h2>\r\n    <span>Hash: {gitInfo.hash}, Date: {gitInfo.date}</span>\r\n  </React.Fragment>\r\n);\r\n\r\n\r\nclass App extends Component {\r\n  getLocalDataSourceURL(localDataSourceName) {\r\n    switch (localDataSource) {\r\n      case \"ok\": return \"./test/laneSwimming.json\";\r\n      case \"singleDataSourceError\": return \"./test/laneSwimming.s10error.json\";\r\n      case \"error\": return \"./test/laneSwimming.error.json\";\r\n      case \"20190427\": return \"./test/20190427-225524_laneSwimming.json\";\r\n      default: return null;\r\n    }\r\n  }\r\n\r\n  getDataSourceURL(localDataSource) {\r\n    if (DEBUG && localDataSource) {\r\n      const url = this.getLocalDataSourceURL(localDataSource);\r\n      if (url) {\r\n        return url;\r\n      }\r\n    }\r\n    return \"https://c1dz9rg5cd.execute-api.eu-west-2.amazonaws.com/prod/laneSwimmingData\";\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const url = this.getDataSourceURL(localDataSource);\r\n    const response = await axios.get(url + \"?\" + new Date().getTime());\r\n    this.setState({ data: response.data });\r\n  }\r\n\r\n  renderTimetable(name, timetable, vendor, key) {\r\n    return (\r\n      <div key={key}>\r\n        <h1>{name || \"Regular Timetable\"} ({vendor || \"Unknown vendor\"})</h1>\r\n        <Timetable timetable={timetable} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderError(name, error, vendor, key) {\r\n    const errorInfo = error.statusCode\r\n      ? [\r\n        error.statusCode,\r\n        error.options && error.options.uri,\r\n      ]\r\n      : (typeof error === \"string\")\r\n        ? error\r\n        : JSON.stringify(error);\r\n\r\n    return (\r\n      <div key={key}>\r\n        <h1>{name} ({vendor || \"Unknown vendor\"})</h1>\r\n        <div>Error: {String(errorInfo)}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderTimetables(data) {\r\n    return data.reduce((result, { vendor, timetables }) => {\r\n      timetables.forEach(({ name, timetable, error }) => {\r\n        result.push(\r\n          error\r\n            ? this.renderError(name, error, vendor, result.length)\r\n            : this.renderTimetable(name, timetable, vendor, result.length)\r\n        );\r\n      });\r\n      return result;\r\n    }, []);\r\n  }\r\n\r\n  renderApp(data) {\r\n    return (\r\n      <div>\r\n        {data && this.renderTimetables(data)}\r\n        <hr />\r\n        <GitInfo gitInfo={gitInfo} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const app = this.renderApp(this.state && this.state.data);\r\n    return (\r\n      <div className=\"App\">{app}</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}